doctype html
html(lang="en")
  head
    title Uartix | Language Constructs

    meta(name="description", content="Uartix Official Documentation")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")

    link(href="styles/customvars.sass", rel="stylesheet")
    link(href="node_modules/bootswatch/dist/yeti/bootstrap.min.css", rel="stylesheet")
    link(href="styles/global.sass", rel="stylesheet")
    link(href="favicon.ico", rel="shortcut icon")

  body(class="bg-secondary")
    div(class="container")
      br
      br

      div(class="bg-white border border-primary shadow-lg")
        br
        br

        div(align="center", class="mt-4 mb-4")
          div(class="col-lg-7 col-10")
            img(src="assets/uartix.png", class="shadow", width="160")
            br
            br
            h1(class="mb-2 fw-bold") Uartix Programming Language
            p(class="lead") /wor&middot;tiks/
            blockquote(class="text-muted") Strange dynamic programming and scripting language that performs mathematical computations on a connected Raspberry Pi Pico (RP2040) through UART connectivity.

        br
        br

        header(class="header sticky-top")
          nav(class="navbar navbar-expand-lg bg-primary", data-bs-theme="dark")
            div(class="container-fluid")
              a(class="navbar-fluid", href="#")
              div(class="w-100 mobile-only", align="center")
                button(
                  class="navbar-toggler",
                  type="button",
                  data-bs-toggle="collapse",
                  data-bs-target="#main-navbar",
                  aria-controls="main-navbar",
                  aria-expanded="false",
                  aria-label="Toggle navigation")
                  span(class="navbar-toggler-icon")
              button(
                class="navbar-toggler desktop-only",
                type="button",
                data-bs-toggle="collapse",
                data-bs-target="#main-navbar",
                aria-controls="main-navbar",
                aria-expanded="false",
                aria-label="Toggle navigation")
                span(class="navbar-toggler-icon")
              div(class="collapse navbar-collapse", id="main-navbar", align="center")
                br(class="mobile-only")
                ul(class="navbar-nav me-auto mb-2 mb-lg-0 d-md-flex d-block flex-row mx-md-auto mx-0")
                  li(class="nav-item")
                    a(class="nav-link", href="index.pug") Home
                  li(class="nav-item")
                    a(class="nav-link", href="getting-started.pug") Getting Started
                  li(class="nav-item")
                    a(class="nav-link", href="grammar.pug") Grammar Definition
                  li(class="nav-item")
                    a(class="nav-link active fw-bold", href="#") Language Constructs
                  li(class="nav-item")
                    a(class="nav-link", href="https://github.com/nthnn/Uartix", target="_blank") GitHub

        br(class="desktop-only")
        br

        div(class="container")
          div(class="row")
            div(class="col-lg-2")

            div(class="col-lg-8")
              h4(class="border-bottom pb-2 fw-bold") Language Constructs
              p This documentation provides a comprehensive guide to the expression and statement constructs in Uartix, based on its Backus-Naur Form (BNF) grammar definition. Each construct is explained in detail with examples to illustrate their usage.
              br

              h5(class="border-bottom pb-2 fw-bold") Expressions
              p Expressions in Uartix are the building blocks for creating and manipulating data. They can range from simple literals to complex operations involving multiple constructs.
              br

              b(class="pb-2") Type Expression 
              p Type expressions are used to specify the type of an expression. This can be useful for type checking and ensuring that the data conforms to expected types.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_01.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Get the type of variable x.</i></span>
                  |
                  | x = <span class="text-primary">type</span> <span class="text-warning">&quot;Hello!&quot;</span>;
                  | <span class="text-primary">render</span> x + <span class="text-warning">&quot;\r\n&quot;</span>;
                  |
                  | y = <span class="text-primary">type</span> 3.14;
                  | <span class="text-primary">render</span> y + <span class="text-warning">&quot;\r\n&quot;</span>;
              br

              b(class="pb-2") Block Expressions
              p Block expressions group multiple statements together within braces. They are used to create a scope for variables and control flow.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_02.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Block example as function body.</i></span>
                  |
                  | add = <span class="text-primary">func</span>(x, y) {
                  |     <span class="text-primary">ret</span> x + y;
                  | };
                  |
                  | <span class="text-primary">render</span> add(5, 10);

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_03.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Block example as variable value.</i></span>
                  |
                  | message = {
                  |     hello = <span class="text-warning">&quot;Hello&quot;</span>;
                  |     hello + <span class="text-warning">&quot;, world!&quot;</span>;
                  | };
                  |
                  | <span class="text-primary">render</span> message + <span class="text-warning">&quot;\r\n&quot;</span>;
              br

              b(class="pb-2") Render Expression
              p Render expressions are used to output the value of an expression. This is similar to a print statement in other languages.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_04.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Render expression examples.</i></span>
                  |
                  | <span class="text-primary">render</span> <span class="text-warning">&quot;Hello, world!\r\n&quot;</span>;
                  | <span class="text-primary">render</span> 3.14;
              br

              b(class="pb-2") Catch Expression
              p Catch expressions handle exceptions that may occur during the evaluation of an expression. Catch-handle expression is the equivalent of try-catch in other programming languages.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_05.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Throw and catch example</i></span>
                  |
                  | <span class="text-primary">catch</span> {
                  |     <span class="text-primary">throw</span> <span class="text-warning">&quot;This is an error.&quot;</span>;
                  | }
                  | <span class="text-primary">handle</span> e {
                  |     <span class="text-primary">render</span> <span class="text-warning">&quot;Error: &quot;</span> + e + <span class="text-warning">&quot;\r\n&quot;</span>;
                  | }
                  | <span class="text-primary">then</span> {
                  |     <span class="text-primary">render</span> <span class="text-warning">&quot;Error was caught.\r\n&quot;</span>;
                  | };
              br

              b(class="pb-2") Do Expression 
              p Do expressions execute a block of code repeatedly while a condition is true. However, unlike a while expression, it first executes the block before the condition.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_06.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Increment count variable using do</i></span>
                  |
                  | count = 0;
                  | <span class="text-primary">do</span> {
                  |     <span class="text-primary">render</span> count + <span class="text-warning">&quot;\r\n&quot;</span>;
                  |     count = count + 1;
                  | } <span class="text-primary">while</span>(count < 5);
              br

              b(class="pb-2") While Expression 
              p While expressions execute a block of code as long as a condition is true.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_07.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Increment i variable using while</i></span>
                  |
                  | i = 0;
                  | <span class="text-primary">while</span>(i < 10) {
                  |     <span class="text-primary">render</span> i + <span class="text-warning">&quot;\r\n&quot;</span>;
                  |     i = i + 1;
                  | };
              br

              b(class="pb-2") If-else Expression 
              p If expressions evaluate a condition and execute a block of code if the condition is true. Optionally, an else block can be provided for when the condition is false.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_08.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Checking x if positive or negative number with if-else</i></span>
                  |
                  | x = 10;
                  | <span class="text-primary">if</span>(x &gt; 0)
                  |     <span class="text-primary">render</span> <span class="text-warning">&quot;x is a positive number&quot;</span>
                  | <span class="text-primary">else</span> <span class="text-primary">render</span> <span class="text-warning">&quot;x is a negative number&quot;</span>;
              br

              b(class="pb-2") Random Expression
              p Random expressions execute a block of code randomly, with an optional else block for when the condition is not met.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_09.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Execute a render expression randomly.</i></span>
                  |
                  | <span class="text-primary">random</span>
                  |     <span class="text-primary">render</span> <span class="text-warning">&quot;Randomly rendered string.\r\n&quot;</span>
                  | <span class="text-primary">else</span> <span class="text-primary">render</span> <span class="text-warning">&quot;Executing the else-clause.\r\n&quot;</span>;
              br

              b(class="pb-2") Loop Expression 
              p Loop expressions define a traditional for-loop structure.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_10.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Loop expression example equivalent to for-loop in other languages.</i></span>
                  |
                  | <span class="text-primary">loop</span>(i = 0; i < 10; i = i + 1)
                  |     <span class="text-primary">render</span> i + <span class="text-warning">&quot;\r\n&quot;</span>;
              br

              b(class="pb-2") Unless Expression 
              p Unless expressions execute a block of code if a condition is false, with an optional else block for when the condition is true.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_11.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Execute unless expression if x is not 0.</i></span>
                  |
                  | x = 3.14;
                  | <span class="text-primary">unless</span>(x == 0)
                  |     <span class="text-primary">render</span> <span class="text-warning">&quot;x is not zero.\r\n&quot;</span>
                  | <span class="text-primary">else</span> <span class="text-primary">render</span> <span class="text-warning">&quot;x is zero\r\n&quot;</span>;

              b(class="pb-2") When Expression 
              p When expressions are used for pattern matching and conditional execution based on multiple conditions. The concept for this expression is same as the switch statement on other programming languages such as C/C++, Java, or C#.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_12.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># When expression to render equivalent day for a number.</i></span>
                  |
                  | day = 1;
                  | <span class="text-primary">when</span>(day) {
                  |     <span class="text-primary">if</span>(0) <span class="text-primary">render</span> <span class="text-warning">&quot;Monday&quot;</span>,
                  |     <span class="text-primary">if</span>(1) <span class="text-primary">render</span> <span class="text-warning">&quot;Tuesday&quot;</span>,
                  |     <span class="text-primary">if</span>(2) <span class="text-primary">render</span> <span class="text-warning">&quot;Wednesday&quot;</span>,
                  |     <span class="text-primary">if</span>(3) <span class="text-primary">render</span> <span class="text-warning">&quot;Thursday&quot;</span>,
                  |     <span class="text-primary">if</span>(4) <span class="text-primary">render</span> <span class="text-warning">&quot;Friday&quot;</span>,
                  |     <span class="text-primary">else</span>  <span class="text-primary">render</span> <span class="text-warning">&quot;Weekday&quot;</span>
                  | };
              br

              b(class="pb-2") Maybe Expression 
              p The maybe expression in Uartix is a boolean value. However, it only acquires a boolean value on runtime with either true or false randomly from the Raspberry Pi Pico.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_13.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Print a string if the maybe has a true value.</i></span>
                  |
                  | should_print = <span class="text-primary">maybe</span>;
                  | <span class="text-primary">if</span>(should_print)
                  |     <span class="text-primary">render</span> <span class="text-warning">&quot;Maybe had a true value.&quot;</span>
                  | <span class="text-primary">else</span> <span class="text-primary">render</span> <span class="text-warning">&quot;Maybe had a false value.&quot;</span>;
              br

              b(class="pb-2") Function Expression 
              p Function expressions define a function with optional parameters and a body.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_14.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Function example for printing a greeting message.</i></span>
                  |
                  | greet = <span class="text-primary">func</span>(name) {
                  |     <span class="text-primary">render</span> <span class="text-warning">&quot;Hello, &quot;</span> + name + <span class="text-warning">&quot;!\r\n&quot;</span>;
                  | };
                  |
                  | greet(<span class="text-warning">&quot;world&quot;</span>);
              br
              
              b(class="pb-2") Array Expressions 
              p Array expressions create an array of values and/or elements. An array might contain combinations of number, string, function, nil, boolean values, or even another array.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_15.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Simple array example.</i></span>
                  |
                  | array = [<span class="text-warning">&quot;Hello&quot;</span>, <span class="text-warning">&quot;Kamusta&quot;</span>, <span class="text-warning">&quot;Konnichiwa&quot;</span>];
                  | <span class="text-primary">render</span> array[1] + <span class="text-warning">&quot;\r\n&quot;</span>;

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_16.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Multidimensional array example.</i></span>
                  |
                  | array = [[0, 1, 2], [3, 4, 5], [6, 7, 8]];
                  | <span class="text-primary">render</span> array;
                  | <span class="text-primary">render</span> <span class="text-warning">&quot;\r\n&quot;</span>;
                  |
                  | array[1][1] = <span class="text-warning">&quot;Four&quot;</span>;
                  | <span class="text-primary">render</span> array;
                  | <span class="text-primary">render</span> <span class="text-warning">&quot;\r\n&quot;</span>;
              br

              b(class="pb-2") Logical and Bitwise Expressions
              p These expressions perform logical and bitwise operations. While the logical operators (|| and &ampt&amp;) returns boolean values, the bitwise operators (| and &amp;) returns number values.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_17.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Logical and bitwise operation examples.</i></span>
                  |
                  | <span class="text-primary">render</span> (<span class="text-primary">true</span> || <span class="text-primary">false</span>) +  <span class="text-warning">&quot;\r\n&quot;</span>; <span class="text-success"><i># Logical or</i></span>
                  | <span class="text-primary">render</span> (<span class="text-primary">true</span> &amp;&amp; <span class="text-primary">false</span>) +  <span class="text-warning">&quot;\r\n&quot;</span>; <span class="text-success"><i># Logical and</i></span>
                  | <span class="text-primary">render</span> (8 | 9) +  <span class="text-warning">&quot;\r\n&quot;</span>;         <span class="text-success"><i># Bitwise or</i></span>
                  | <span class="text-primary">render</span> (8 &amp; 9) +  <span class="text-warning">&quot;\r\n&quot;</span>;         <span class="text-success"><i># Bitwise and</i></span>
                  | <span class="text-primary">render</span> (8 ^ 9) + <span class="text-warning">&quot;\r\n&quot;</span>;          <span class="text-success"><i># Bitwise xor</i></span>
              br

              b(class="pb-2") Equality and Comparison Expressions
              p These expressions compare expressions and returns boolean values.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_18.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Comparison operator examples.</i></span>
                  |
                  | <span class="text-primary">render</span> (8 == 9) +  <span class="text-warning">&quot;\r\n&quot;</span>;   <span class="text-success"><i># Equals</i></span>
                  | <span class="text-primary">render</span> (8 != 9) +  <span class="text-warning">&quot;\r\n&quot;</span>;   <span class="text-success"><i># Not equals</i></span>
                  | <span class="text-primary">render</span> (8 &lt; 9) +  <span class="text-warning">&quot;\r\n&quot;</span>;    <span class="text-success"><i># Less than equals</i></span>
                  | <span class="text-primary">render</span> (8 &gt; 9) +  <span class="text-warning">&quot;\r\n&quot;</span>;    <span class="text-success"><i># Greater than equals</i></span>
                  | <span class="text-primary">render</span> (8 &lt;= 9) +  <span class="text-warning">&quot;\r\n&quot;</span>;   <span class="text-success"><i># Less than equals</i></span>
                  | <span class="text-primary">render</span> (8 &gt;= 9) +  <span class="text-warning">&quot;\r\n&quot;</span>;   <span class="text-success"><i># Greater than equals</i></span>
              br

              b(class="pb-2") Shift Expressions 
              p These expressions perform bitwise shift operations.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_19.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Shift operator examples.</i></span>
                  |
                  | <span class="text-primary">render</span> (8 &lt;&lt; 9) + <span class="text-warning">&quot;\r\n&quot;</span>; <span class="text-success"><i># Left shift expression</i></span>
                  | <span class="text-primary">render</span> (8 &gt;&gt; 9) + <span class="text-warning">&quot;\r\n&quot;</span>; <span class="text-success"><i># Right shift expression</i></span>
              br

              b(class="pb-2") Term and Factor Expressions
              p These expressions perform basic arithmetic operations.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_20.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Term and factor operator examples.</i></span>
                  |
                  | <span class="text-primary">render</span> (8 + 9) + <span class="text-warning">&quot;\r\n&quot;</span>;  <span class="text-success"><i># Add</i></span>
                  | <span class="text-primary">render</span> (8 - 9) + <span class="text-warning">&quot;\r\n&quot;</span>;  <span class="text-success"><i># Subtract</i></span>
                  | <span class="text-primary">render</span> (8 / 9) + <span class="text-warning">&quot;\r\n&quot;</span>;  <span class="text-success"><i># Divide</i></span>
                  | <span class="text-primary">render</span> (8 * 9) + <span class="text-warning">&quot;\r\n&quot;</span>;  <span class="text-success"><i># Multiply</i></span>
                  | <span class="text-primary">render</span> (8 % 9) + <span class="text-warning">&quot;\r\n&quot;</span>;  <span class="text-success"><i># Reminder/Modulus</i></span>
              br

              b(class="pb-2") Literal Expressions 
              p These represent constant values in the language.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_21.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Literal expression examples.</i></span>
                  |
                  | <span class="text-primary">render</span> 3.14 + <span class="text-warning">&quot;\r\n&quot;</span>;   <span class="text-success"><i># Number</i></span>
                  | <span class="text-primary">render</span> <span class="text-primary">true</span> + <span class="text-warning">&quot;\r\n&quot;</span>;   <span class="text-success"><i># True</i></span>
                  | <span class="text-primary">render</span> <span class="text-primary">false</span> + <span class="text-warning">&quot;\r\n&quot;</span>;  <span class="text-success"><i># False</i></span>
                  | <span class="text-primary">render</span> <span class="text-primary">nil</span>;             <span class="text-success"><i># Nil expression</i></span>
              br

              h5(class="border-bottom pb-2 fw-bold") Statements
              p Statements in Uartix are instructions that perform actions. They can control the flow of execution, declare variables, or perform expressions.
              br

              b(class="pb-2") Break Statement 
              p The break statement exits the nearest enclosing loop.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_22.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Break loop if i is 5.</i></span>
                  |
                  | <span class="text-primary">loop</span>(i = 0; i &lt; 10; i = i + 1) {
                  |     <span class="text-primary">if</span>(i == 5) {
                  |         <span class="text-primary">break</span>;
                  |     };
                  |
                  |     <span class="text-primary">render</span> i + <span class="text-warning">&quot;\r\n&quot;;
                  | };
              br

              b(class="pb-2") Continue Statement
              p The continue statement skips the current iteration of the nearest enclosing loop and proceeds with the next iteration.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_23.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Skip loop iteration if i is even number.</i></span>
                  |
                  | <span class="text-primary">loop</span>(i = 0; i &lt; 10; i = i + 1) {
                  |     <span class="text-primary">if</span>(i % 2 == 0) {
                  |         <span class="text-primary">continue</span>;
                  |     };
                  |
                  |     <span class="text-primary">render</span> i + <span class="text-warning">&quot;\r\n&quot;;
                  | };
              br

              b(class="pb-2") Return Statement 
              p The return statement exits a function and optionally returns a value. If a block is a non-function, do not use return statement instead just put the return value inside an expression statement.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_24.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Return value from a function.</i></span>
                  |
                  | add = <span class="text-primary">func</span>(x, y) {
                  |     <span class="text-primary">ret</span> x + y;
                  | };
                  |
                  | <span class="text-primary">render</span> <span class="text-warning">&quot;The sum of x and y is &quot;</span> + add(8, 9);
              br

              b(class="pb-2") Throw Statement 
              p The throw statement raises an exception that can be caught by a catch-handle expression.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_25.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Throw with string expression example.</i></span>
                  |
                  | check_value = <span class="text-primary">func</span>(value) {
                  |     <span class="text-primary">if</span>(value &lt; 0) {
                  |         <span class="text-primary">throw</span> <span class="text-warning">&quot;Negative value not allowed!&quot;</span>;
                  |     };
                  |
                  |     <span class="text-primary">ret</span> value;
                  | };
                  |
                  | <span class="text-primary">catch</span> {
                  |     check_value(-1);
                  | }
                  | <span class="text-primary">handle</span> error {
                  |     <span class="text-primary">render</span> <span class="text-warning">&quot;Error: &quot;</span> + error + <span class="text-warning">&quot;\r\n&quot;</span>;
                  | };
              br

              h5(class="border-bottom pb-2 fw-bold") Strings
              p In Uartix, strings are sequences of characters enclosed in double quotes (&quot;). Strings are used to represent text and can contain a variety of characters, including letters, numbers, punctuation, and special characters.
              p Additionally, strings can be concatenated using the + operator and can also be reversed with the ~ unary operator. The multiplication (*) operator can also multiply a string.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_26.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># String operation example.</i></span>
                  |
                  | <span class="text-primary">render</span> (~<span class="text-warning">&quot;Hello&quot;</span>) + <span class="text-warning">&quot;\r\n&quot;</span>;
                  | <span class="text-primary">render</span> <span class="text-warning">&quot;Go! &quot;</span> * 3;
              br

              b(class="pb-2") Escape Sequences 
              p Escape sequences are used in strings to represent special characters that cannot be directly included in the string. An escape sequence begins with a backslash (\) followed by one or more characters. Uartix supports several escape sequences:

              ul
                li
                  b Newline (\n)
                  p Represents a newline character, which moves the cursor to the beginning of the next line.
                li
                  b Carriage Return (\r)
                  p Represents a carriage return character, which moves the cursor to the beginning of the current line.
                li
                  b Tab (\t)
                  p Represents a tab character, which moves the cursor to the next tab stop.
                li
                  b Backspace (\b)
                  p Represents a backspace character, which moves the cursor one position to the left.
                li
                  b Form Feed (\f)
                  p Represents a form feed character, which moves the cursor to the beginning of the next page.
                li
                  b Double Quote (\")
                  p Represents a double quote character, allowing double quotes to be included within strings.
                li 
                  b Backslash (\\)
                  p Represents a backslash character, allowing backslashes to be included within strings.
                li
                  b Unicode (\uXXXX)
                  p Represents a Unicode character, where XXXX is a four-digit hexadecimal number corresponding to the Unicode code point.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_27.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># String escape sequence examples.</i></span>
                  |
                  | <span class="text-primary">render</span> <span class="text-warning">&quot;Hello,\nWorld!\r\n&quot;</span>;
                  | <span class="text-primary">render</span> <span class="text-warning">&quot;Hello,\rWorld!\r\n&quot;</span>;
                  | <span class="text-primary">render</span> <span class="text-warning">&quot;Hello,\tWorld!\r\n&quot;</span>;
                  | <span class="text-primary">render</span> <span class="text-warning">&quot;Hello,\bWorld!\r\n&quot;</span>;
                  | <span class="text-primary">render</span> <span class="text-warning">&quot;Hello,\fWorld!\r\n&quot;</span>;
                  | <span class="text-primary">render</span> <span class="text-warning">&quot;They say, \&quot;Hello, World!\&quot;\r\n&quot;</span>;
                  | <span class="text-primary">render</span> <span class="text-warning">&quot;This is a backslash: \\\r\n&quot;</span>;
                  | <span class="text-primary">render</span> <span class="text-warning">&quot;Smiley face: \u263A\r\n&quot;</span>;
              br

              h5(class="border-bottom pb-2 fw-bold") Digits and Numbers
              p In Uartix, numbers are a fundamental data type used for arithmetic operations, comparisons, and other numerical computations. Uartix supports a variety of numerical formats, including standard decimal numbers, as well as binary, trinary, octal, and hexadecimal numbers. This allows developers to work with different numerical bases efficiently.

              ul
                li
                  b Decimal Numbers
                  p Decimal numbers are the most commonly used numerical format. They can include integer values or floating-point values with decimals. Uartix uses double-precision floating-point representation for numbers with decimals, ensuring high accuracy for mathematical computations.
                li
                  b Binary Numbers
                  p Binary numbers in Uartix are prefixed with <code class="d-inline text-dark border border-dark px-1">0b</code> and consist of the digits 0 and 1. This format is useful for low-level programming, bitwise operations, and when working with binary data.
                li
                  b Trinary Numbers
                  p Trinary numbers are prefixed with <code class="d-inline text-dark border border-dark px-1">0t</code> and can include the digits 0, 1, and 2. While less common than other bases, trinary can be useful in specific computational contexts.
                li
                  b Octal Numbers
                  p Octal numbers are prefixed with <code class="d-inline text-dark border border-dark px-1">0c</code> and use the digits 0 through 7. Octal representation is often used in computing for compact binary representation, as each octal digit corresponds to three binary digits.
                li
                  b Hexadecimal Numbers
                  p Hexadecimal numbers are prefixed with <code class="d-inline text-dark border border-dark px-1">0x</code> and can include the digits 0 through 9 and the letters a through f (or A through F). Hexadecimal is widely used in computing for memory addresses, color codes, and other applications requiring a compact representation of binary data.

              div(class="bg-primary w-100 mt-2")
                p(class="text-white m-0 ms-2") example_28.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Different number bases examples.</i></span>
                  |
                  | binary_num  = 0b1101;
                  | trinary_num = 0t102;
                  | octal_num   = 0c17;
                  | hex_num     = 0xf;
                  |
                  | <span class="text-primary">render</span> binary_num + <span class="text-warning">&quot;\r\n&quot;</span>;
                  | <span class="text-primary">render</span> trinary_num + <span class="text-warning">&quot;\r\n&quot;</span>;
                  | <span class="text-primary">render</span> octal_num + <span class="text-warning">&quot;\r\n&quot;</span>;
                  | <span class="text-primary">render</span> hex_num + <span class="text-warning">&quot;\r\n&quot;</span>;

            div(class="col-lg-2")

        br
        br

      br
      div(align="center")
        small Copyright 2024 &copy; <a href="https://github.com/nthnn" target="_blank" class="text-decoration-none">Nathanne Isip</a>
      br

    script(src="node_modules/bootstrap/dist/js/bootstrap.bundle.min.js")
