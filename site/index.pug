doctype html
html(lang="en")
  head
    title Uartix Documentation

    meta(name="description", content="Uartix Official Documentation")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")

    link(href="styles/customvars.sass", rel="stylesheet")
    link(href="node_modules/bootswatch/dist/yeti/bootstrap.min.css", rel="stylesheet")
    link(href="styles/global.sass", rel="stylesheet")

  body(class="bg-secondary")
    div(class="container")
      br
      br

      div(class="bg-white border border-primary shadow-lg")
        br
        br

        div(align="center", class="mt-4 mb-4")
          div(class="col-lg-7 col-10")
            img(src="assets/uartix.png", class="shadow", width="160")
            br
            br
            h1(class="mb-2 fw-bold") Uartix Programming Language
            p(class="lead") /wor&middot;tiks/
            blockquote(class="text-muted") Strange dynamic programming and scripting language that performs mathematical computations on a connected Raspberry Pi Pico (RP2040) through UART connectivity.

        br
        br

        header(class="header sticky-top")
          nav(class="navbar navbar-expand-lg bg-primary", data-bs-theme="dark")
            div(class="container-fluid")
              a(class="navbar-fluid", href="#")
              div(class="w-100 mobile-only", align="center")
                button(
                  class="navbar-toggler",
                  type="button",
                  data-bs-toggle="collapse",
                  data-bs-target="#main-navbar",
                  aria-controls="main-navbar",
                  aria-expanded="false",
                  aria-label="Toggle navigation")
                  span(class="navbar-toggler-icon")
              button(
                class="navbar-toggler desktop-only",
                type="button",
                data-bs-toggle="collapse",
                data-bs-target="#main-navbar",
                aria-controls="main-navbar",
                aria-expanded="false",
                aria-label="Toggle navigation")
                span(class="navbar-toggler-icon")
              div(class="collapse navbar-collapse", id="main-navbar", align="center")
                br(class="mobile-only")
                ul(class="navbar-nav me-auto mb-2 mb-lg-0 d-md-flex d-block flex-row mx-md-auto mx-0")
                  li(class="nav-item")
                    a(class="nav-link active", href="#") Home
                  li(class="nav-item")
                    a(class="nav-link", href="getting-started.pug") Getting Started
                  li(class="nav-item")
                    a(class="nav-link", href="grammar.pug") Grammar Definition
                  li(class="nav-item")
                    a(class="nav-link", href="constructs.pug") Language Constructs
                  li(class="nav-item")
                    a(class="nav-link", href="https://github.com/nthnn/Uartix", target="_blank") GitHub

        br(class="desktop-only")
        br

        div(class="container")
          div(class="row")
            div(class="col-lg-2")

            div(class="col-lg-8")
              h4(class="border-bottom pb-2 fw-bold") Why Uartix?
              p
                | Despite its unconventional and dynamic behavior, as well as its lack of
                | fundamental APIs, Uartix can still serve as a general-purpose programming
                | and scripting language. The following points outline the reasons behind
                | the development of Uartix:
              ul
                li The Raspberry Pi Pico, with its dual-core ARM Cortex-M0+ processor, offers a powerful yet affordable platform for hardware-level computation.
                li Uartix provides a specialized environment where developers can perform complex mathematical operations directly on the hardware.
                li Compared to many external co-processors, Uartix running on a Raspberry Pi Pico presents a highly cost-effective solution. The affordability of the Pico reduces overall project costs while still delivering substantial computational power for a variety of applications.
                li Uartix enhances the capabilities of the Raspberry Pi Pico by simplifying the development process with hardware-level mathematical calculations.
                li The Raspberry Pi Pico, with its energy-efficient ARM Cortex-M0+ cores, offers a low-power solution for performing mathematical calculations which is perfect for Uartix runtime execution.
                li Why not? I was bored when I started developing this.
              br

              h4(class="border-bottom pb-2 fw-bold") Your First Program
              p
                | The Hello World program in Uartix demonstrates the basic syntax and functionality of
                | the language, showcasing how to define and call a function that generates a simple
                | greeting message. This example introduces key concepts such as function definition,
                | string concatenation, and function invocation, providing a foundation for more
                | complex programs.
              
              div(class="bg-primary w-100")
                p(class="text-white m-0 ms-2") hello.utx
              code(class="text-dark")
                pre(class="border border-primary p-2")
                  | <span class="text-success"><i># Hello world example</i></span>
                  |
                  | greet = <span class="text-primary">func</span>(name)
                  |     <span class="text-primary">render</span> <span class="text-warning">&quot;Hello, &quot;</span> + name;
                  |
                  | greet(<span class="text-warning">&quot;world&quot;</span>);

              p
                | The line <code class="d-inline text-dark border border-dark px-1">greet = <span class="text-primary">func</span>(name)</code> defines a function named <code class="d-inline text-dark border border-dark px-1">greet</code> that takes a single
                | parameter, <code class="d-inline text-dark border border-dark px-1">name</code>. In Uartix, the func keyword is used to declare a function. The
                | assignment <code class="d-inline text-dark border border-dark px-1">greet = <span class="text-primary">func</span>(name)</code> binds this function to the identifier <code class="d-inline text-dark border border-dark px-1">greet</code>,
                | allowing it to be called later in the program. The parameter <code class="d-inline text-dark border border-dark px-1">name</code> represents the
                | input that the function will receive when it is called.

              p 
                | Within the function body, which is indicated by the indentation following the
                | function definition, there is a single statement: <code class="d-inline text-dark border border-dark px-1"><span class="text-primary">render</span> <span class="text-warning">&quot;Hello, &quot;</span> + name;</code>.
                | This line uses the <code class="d-inline text-dark border border-dark px-1"><span class="text-primary">render</span></code> keyword, which is a command in Uartix to output text
                | to the console or display. The expression <code class="d-inline text-dark border border-dark px-1"><span class="text-warning">&quot;Hello, &quot;</span> + name</code> demonstrates string
                | concatenation, where the literal string <code class="d-inline text-dark border border-dark px-1"><span class="text-warning">&quot;Hello, &quot;</span></code> is combined with the value of
                | the <code class="d-inline text-dark border border-dark px-1">name</code> parameter. The resulting string is then rendered or displayed as the
                | output of the function.

              p
                | Finally, the line <code class="d-inline text-dark border border-dark px-1">greet(<span class="text-warning">&quot;world&quot;</span>);</code> calls the <code class="d-inline text-dark border border-dark px-1">greet</code> function with the argument
                | <code class="d-inline text-dark border border-dark px-1"><span class="text-warning">&quot;world&quot;</span></code>. When this line is executed, the function <code class="d-inline text-dark border border-dark px-1">greet</code> is invoked, and the
                | string <code class="d-inline text-dark border border-dark px-1"><span class="text-warning">&quot;world&quot;</span></code> is passed as the parameter <code class="d-inline text-dark border border-dark px-1">name</code>. Inside the function, this
                | parameter is used to create the greeting message. Consequently, the <code class="d-inline text-dark border border-dark px-1"><span class="text-primary">render</span></code>
                | statement outputs the concatenated string <code class="d-inline text-dark border border-dark px-1"><span class="text-warning">&quot;Hello, world&quot;</span></code>, which is the final
                | result of the program.
              br

              h4(class="border-bottom pb-2 fw-bold") Development Support
              p Uartix is an open-source project and is voluntarily developed. If you find Uartix useful and would like to support its continued development and improvement, you can make a donation.
              div(align="center")
                a(href="https://opencollective.com/nathanne-isip", target="_blank")
                  img(src="https://opencollective.com/webpack/donate/button@2x.png?color=blue", width="270")

            div(class="col-lg-2")

        br
        br

      br
      div(align="center")
        small Copyright 2024 &copy; <a href="https://github.com/nthnn" target="_blank" class="text-decoration-none">Nathanne Isip</a>
      br

    script(src="node_modules/bootstrap/dist/js/bootstrap.bundle.min.js")
